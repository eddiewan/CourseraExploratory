## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#remove
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset <- subset(dataset, selected = selectedNames)
?subset
head(subset(dataset, selected = selectedNames))
head(dataset[selectedNames])
dataset_subset <- dataset[selectedNames,]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
activities
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activities
dataset_subset
head(dataset_subset)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[selectedNames,]
dataset_subset
dataset_subset <- dataset[,selectedNames]
head(dataset_subset)
activities[match[dataset_subset[,"activity"], activities$activityId],2,drop=F]
activities[match[dataset_subset[,"activity"], activities$activityId],2]
head(dataset_subset[,"activity"])
temp <- head(dataset_subset[,"activity"])
activities[match[temp,activities$activityId],2]
activities[match[temp,activities[1],2]
]
activities[match[temp,activities[1]],2]
activities[match[temp,activities[,1]],2]
activities[match[temp,activities[,1]],2, drop = F]
typeof(activities)
typeof(activities[,1])
?list2df
temp <- stack(lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
temp <- do.call(lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
temp <- do.call(rbind,lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
?merge
temp <- head(dataset_subset)
temp <- head(dataset_subset[,"activity"])
temp
merge(temp,activities, by=activities[,2])
merge(temp,activities, by.y=activities[,2])
merge(temp,activities, by.x=activities[,2])
merge(temp,activities)
merge(temp,activities, by.x)
merge(temp,activities, by.x=by)
temp1 <- head(dataset_subset[,"activity"])
merge(temp1,activities, by.x=by)
typeof(dataset_subset)
typeof(activities)
typeof(dataset_subset[,"activity"])
as.data.frame(temp)
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test, by.x = dataset_test$activity, by.y = activity_test$activityId))
## Assign names to the tables subject and Target
names(dataSubjects) <- "subjectId"
names(dataTarget) <- "activityId"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test, by.x = dataset_test$activity, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by.x = dataset_test$activity))
head(merge(dataset_test, activity_test))
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- "UCI HAR Dataset"
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
##### STEP 2 READ DATA #####
## read training data
trainSubjects           <- read.table(paste0(dataFolder, "/train/", "subject_train.txt"), header = FALSE)
trainFeatureValues      <- read.table(paste0(dataFolder, "/train/", "X_train.txt"), header = FALSE)
trainTarget             <- read.table(paste0(dataFolder, "/train/", "y_train.txt"), header = FALSE)
## read test data
testSubjects            <- read.table(paste0(dataFolder, "/test/", "subject_test.txt"), header = FALSE)
testFeatureValues       <- read.table(paste0(dataFolder, "/test/", "X_test.txt"), header = FALSE)
testTarget              <- read.table(paste0(dataFolder, "/test/", "y_test.txt"), header = FALSE)
##### STEP 3 MERGE TRAIN AND TEST DATA SET #####
dataSubjects            <- rbind(trainSubjects, testSubjects)
dataFeatureValues       <- rbind(trainFeatureValues, testFeatureValues)
dataTarget              <- rbind(trainTarget, testTarget)
## Assign names to the tables subject and Target
names(dataSubjects) <- "subjectId"
names(dataTarget) <- "activityId"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[,selectedNames]
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subjectId", "activityId")
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test))
activities
activity_test
dataset_test
head(merge(dataset_test, activity_test, by.x = dataset_test$activityId, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by.x = dataset_test$activityId))#, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
activity_test <- head(as.data.frame(activities))
dataset_test <- head(as.data.frame(dataset_subset))
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
dataset_test
dataset_test$activityId
activity_test
activity_test <- head(as.data.frame(activities),20)
dataset_test <- head(as.data.frame(dataset_subset),20)
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by = "activityId"),20)#, by.y = activity_test$activityId))
head(dataset_subset$activityId)
head(dataset_subset$activityId,100)
activity_test <- head(as.data.frame(activities),100)
dataset_test <- head(as.data.frame(dataset_subset),100)
head(merge(dataset_test, activity_test, by = "activityId"),100)#, by.y = activity_test$activityId))
result <- merge(dataset_test, activity_test, by = "activityId")
activity_test <- head(as.data.frame(activities),100)
dataset_test <- head(as.data.frame(dataset_subset),100)
result <- merge(dataset_test, activity_test, by = "activityId")
result$activityId
result$activityLabel
cbind(result$activityId,result$activityLabel)
#convert to dataframe in order to merge lists
activities_df           <- as.data.frame(activities)
dataset_subset_df       <- as.data.frame(dataset_subset)
merged_df <- merge(dataset_test, activity_test, by = "activityId")
View(merged_df)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c("subjectId", "activityId", features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2])
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
#convert to dataframe in order to merge lists
activities_df           <- as.data.frame(activities)
dataset_subset_df       <- as.data.frame(dataset_subset)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_test, activity_test, by = "activityId")
View(merged_df)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_subset_df, activities_df, by = "activityId")
head(merged_df)
result <- merge(activity_test, dataset_test , by = "activityId")
?gsub
merged_df.Names
names(merged_df)
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df) <- gsub('-std', 'StandardDeviation', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('[-()]', '', names(merged_df))
names(merged_df)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_subset_df, activities_df, by = "activityId")
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df) <- gsub('-std', 'StandardDeviation', names(merged_df))
names(merged_df) <- gsub('[()]', '', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('[-()]', '', names(merged_df))
names(merged_df)
c(names(merged_df))
names(merged_df)[-c("subjectId", "activityLabel")]
names(merged_df)[,-c("subjectId", "activityLabel")]
feature_names <- names(merged_df)
feature_names[-c("subjectId", "activityLabel")]
feature_names
feature_names[,-c("subjectId", "activityLabel")]
feature_names[c("subjectId", "activityLabel")]
feature_names["subjectId"]
feature_names[1]
subset(feature_names, select = -c("subjectId"))
feature_names <- names(merged_df)
subset(feature_names, select = -c("subjectId"))
select(feature_names, subjectId)
select(feature_names, "subjectId")
select(merged_df, "subjectId")
feature_names[feature_names %in% "subjectId"]
feature_names[feature_names %not in% "subjectId"]
feature_names[!feature_names %in% "subjectId"]
feature_names[!feature_names %in% c("subjectId", "activityLabel")]
feature_names <- names(merged_df)
first_features <- c("subjectId", "activityLabel")
remaining_features <- feature_names[!(feature_names %in% C(first_features,"activityId"))]
remaining_features <- feature_names[!(feature_names %in% c(first_features,"activityId"))]
remaining_features
cleaned_dataset <- merged_df[c(first_features, remaining_features)]
names(cleaned_dataset)
head(cleaned_dataset)
test <- head(cleaned_dataset)
test
aggregate(.~subjectID+activityLabel, test, mean)
aggregate(.~subjectId+activityLabel, test, mean)
mean_cleaned_dataset <- aggregate(.~subjectId+activityLabel, cleaned_dataset, mean)
head(mean_cleaned_dataset)
View(mean_cleaned_dataset)
write.table(mean_cleaned_dataset,row.names = F)
?write.table
write.table(mean_cleaned_dataset, file = '20190924_mean_cleaned_dataset.txt',row.names = F)
getwd()
setwd("C:/Users/ewanner/Documents/GitHub/CouseraExploratory")
setwd("C:\Users\ewanner\Documents\GitHub\CourseraExploratory")
setwd("C:/Users/ewanner/Documents/GitHub/CourseraExploratory")
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
fileZip         <- "exdata%2Fdata%2FNEI_data.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- ""
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
getwd()
source("initialize.R")
## This first line will likely take a few seconds. Be patient!
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
head(NEI)
unique(NEI$year)
table(NEI$year)
with(NEI, tapply(year, Emissions, mean))
tapply(NEI$Emissions, NEI$year, FUN = mean))
tapply(NEI$Emissions, NEI$year, FUN = mean)
tapply(NEI$Emissions, NEI$year, FUN = sum)
plot(tapply(NEI$Emissions, NEI$year, FUN = sum))
Hist(tapply(NEI$Emissions, NEI$year, FUN = sum))
hist(tapply(NEI$Emissions, NEI$year, FUN = sum))
plot(tapply(NEI$Emissions, NEI$year, FUN = sum), type = "l")
aggYear <- aggregate(Emission ~ year, data = NEI, FUN = sum)
aggYear <- aggregate(Emissions ~ year, data = NEI, FUN = sum)
aggYear
hist(aggYear)
hist(aggYear$year, aggYear$Emissions)
hist(aggYear$year~aggYear$Emissions)
str(aggYear)
hist(aggYear$Emissions)
?barplot
barplot(height = aggYear$Emissions)
barplot(height = aggYear$Emissions,
names.arg = aggYear$year)
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = "Total PM{2.5} emission",
ylim = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = "Total PM{2.5} emission",
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = "Total PM[2.5] emission",
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression("Total PM[2.5] emission"),
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression("Total PM"*[2.5]*" emission"),
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression("Total PM"*[2.5]*" emission"),
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'*[2.5]*' emission'),
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission")
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission",
xlab = "Year")
### initialize
source("initialize.R")
#Read the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year, data = NEI, FUN = sum)
#Create a png plot of size 480x480
png("plot1.png", width=480, height=480)
par(mfrow = c(1,1))
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission",
xlab = "Year")
dev.off()
#Create barplot
barplot(height = as.numeric(aggYear$Emissions),
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission",
xlab = "Year")
options(scipen=5)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission",
xlab = "Year")
options(scipen=1)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission",
xlab = "Year")
options(scipen=5)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year, data = NEI, FUN = sum)
#Create a png plot of size 480x480
png("plot1.png", width=480, height=480)
par(mfrow = c(1,1))
options(scipen=5)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
dev.off()
#select baltimore data
NEIbaltimore <- subset(NEI, fips == '24510')
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year, data = NEIbaltimore, FUN = sum)
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
#select baltimore data
NEIbaltimore <- subset(NEI, fips == '24510')
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year, data = NEIbaltimore, FUN = sum)
#Create a png plot of size 480x480
png("plot2.png", width=480, height=480)
par(mfrow = c(1,1))
options(scipen=5)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
dev.off()
#Create a png plot of size 480x480
png("plot2.png", width=480, height=480)
par(mfrow = c(1,1))
options(scipen=5)
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
main = expression('Total PM'[2.5]*' emission in Baltimore City, Maryland'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
dev.off()
head(NEIbaltimore)
head(SCC)
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year + Data.Category, data = NEIbaltimore, FUN = sum)
#select baltimore data
NEIbaltimore <- subset(NEI, fips == '24510')
head(NEIbaltimore)
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year + type, data = NEIbaltimore, FUN = sum)
aggYear
ggplot(NEIbaltimore, aes(year, type, emissions)) +
geom_lines() +
facet_grid(.~type)
library(ggplot2)
ggplot(NEIbaltimore, aes(year, type, emissions)) +
geom_lines() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(year, type, emissions)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(year, emissions,type)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(year, emissions,fill =type)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(year, Emissions,fill =type)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(year, Emissions,type)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_point() +
facet_grid(.~type)
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type)
?geom_bar
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type) +
labs(main = expression('Total PM'[2.5]*'emission in Baltimore City, Maryland')) +
labs(x="year", y = "Yearly total emission (in tons)")
#Create barplot
barplot(height = aggYear$Emissions,
names.arg = aggYear$year,
title = expression('Total PM'[2.5]*' emission in Baltimore City, Maryland'),
ylab = "Yearly total emission (in tons)",
xlab = "Year")
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type) +
labs(title = expression('Total PM'[2.5]*'emission in Baltimore City, Maryland')) +
labs(x="year", y = "Yearly total emission (in tons)")
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type) +
labs(title = expression('Total PM'[2.5]*' emission in Baltimore City, Maryland')) +
labs(x="year", y = "Yearly total emission (in tons)")
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type) +
labs(title = expression('Total PM'[2.5]*' emission in Baltimore City, Maryland per source type')) +
labs(x="year", y = "Yearly total emission (in tons)")
#select baltimore data
NEIbaltimore <- subset(NEI, fips == '24510')
#Determine total emission per year
aggYear <- aggregate(Emissions ~ year + type, data = NEIbaltimore, FUN = sum)
#Create a png plot of size 480x480
png("plot3.png", width=480, height=480)
par(mfrow = c(1,1))
ggplot(NEIbaltimore, aes(factor(year), Emissions,type)) +
geom_bar(stat = "identity") +
facet_grid(.~type) +
labs(title = expression('Total PM'[2.5]*' emission in Baltimore City, Maryland per source type')) +
labs(x="year", y = "Yearly total emission (in tons)")
dev.off()
head(NEIbaltimore)
head(SCC)
unique(SCC[,1])
unique(SCC[,2])
unique(SCC[,3])
names(SCC)
unique(SCC[,7])
unique(SCC[,8])
unique(SCC[,9])
unique(SCC[,10])
View(SCC)
